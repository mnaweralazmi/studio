rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Unauthenticated users can only read topics
    match /data/{topicId} {
      allow read: true;
      allow write: if isAdmin();
    }
    
    // Authenticated users can manage their own user document
    match /users/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create: if request.auth != null;
    }

    // Authenticated users can manage their own tasks
    match /tasks/{taskId} {
      allow read, write, delete: if request.auth != null && (request.resource.data.ownerId == request.auth.uid || (request.query.filters.find(f => f[0] == 'ownerId' && f[2] == request.auth.uid) != null));
    }
    
    match /completed_tasks/{taskId} {
       allow read, write: if request.auth != null && (request.resource.data.ownerId == request.auth.uid || (request.query.filters.find(f => f[0] == 'ownerId' && f[2] == request.auth.uid) != null));
    }

    // Rules for all financial collections
    function financialDataAccessRules() {
      return {
        // Query check: The query must filter by ownerId
        allow list: if request.auth != null && (request.query.filters.find(f => f[0] == 'ownerId' && f[2] == request.auth.uid) != null || isAdmin()),
        // Single-document read check: The document's ownerId must match
        allow get: if request.auth != null && (isOwner(resource.data.ownerId) || isAdmin()),
        // Write checks: The user must be the owner of the new/updated data
        allow create: if request.auth != null && isOwner(request.resource.data.ownerId),
        allow update, delete: if request.auth != null && isOwner(resource.data.ownerId)
      }
    }

    // Apply rules to all departmental collections
    match /agriculture_sales/{docId} { rules: financialDataAccessRules() }
    match /agriculture_expenses/{docId} { rules: financialDataAccessRules() }
    match /agriculture_debts/{docId} { rules: financialDataAccessRules() }
    match /agriculture_workers/{docId} { rules: financialDataAccessRules() }
    
    match /livestock_sales/{docId} { rules: financialDataAccessRules() }
    match /livestock_expenses/{docId} { rules: financialDataAccessRules() }
    match /livestock_debts/{docId} { rules: financialDataAccessRules() }
    match /livestock_workers/{docId} { rules: financialDataAccessRules() }

    match /poultry_sales/{docId} { rules: financialDataAccessRules() }
    match /poultry_expenses/{docId} { rules: financialDataAccessRules() }
    match /poultry_debts/{docId} { rules: financialDataAccessRules() }
    match /poultry_workers/{docId} { rules: financialDataAccessRules() }

    match /fish_sales/{docId} { rules: financialDataAccessRules() }
    match /fish_expenses/{docId} { rules: financialDataAccessRules() }
    match /fish_debts/{docId} { rules: financialDataAccessRules() }
    match /fish_workers/{docId} { rules: financialDataAccessRules() }

    // Apply rules to all archive collections
    match /archive_sales/{docId} { rules: financialDataAccessRules() }
    match /archive_expenses/{docId} { rules: financialDataAccessRules() }
    match /archive_debts/{docId} { rules: financialDataAccessRules() }
  }
}
