rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Private User Data ---
    // Rule: Allow users to fully control their own data within their "users/{userId}" path.
    // This includes collections like "topics", "tasks", etc.
    match /users/{userId}/{document=**} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.userId == userId;
    }
    
    // --- Topics Collection (Specific Rules for Creation) ---
    // Rule: Apply specific validation when creating a document in the "topics" subcollection.
    match /users/{userId}/topics/{topicId} {
        allow create: if request.auth != null 
                    && request.auth.uid == userId
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.title is string
                    && request.resource.data.title.size() > 1;
    }

    // --- Public Posts Collection ---
    // Rule: Allow anyone to read, but only authenticated users to create posts for themselves.
    // Editing and deleting is restricted to the post owner.
    match /posts/{postId} {
      // To restrict reading to authenticated users only, change to: allow read: if request.auth != null;
      allow read: if true;
      
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // --- Notifications Collection ---
    // Rule: Read access is for the target user or for 'all'. Write is disallowed from client.
    match /notifications/{notificationId} {
      allow read: if request.auth != null && (resource.data.target == request.auth.uid || resource.data.target == 'all');
      allow create, update, delete: if false; // Should be handled by backend/admin only
    }
  }
}
