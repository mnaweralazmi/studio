rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      // This UID is the primary admin for the application.
      return request.auth.uid in ['JU2IAJu8XEeCqM33bu1wzlrA7id2'];
    }

    // Site-wide content, only admin can write
    match /siteContent/{docId} {
        // Anyone authenticated can read site content (like the ad marquee)
        allow read: if request.auth != null;
        // Only admins can create, update, or delete site content
        allow write: if isAdmin();
    }
    
    // Notifications are write-only for admin, read for target users
    match /notifications/{notifId} {
        // Only admins can create notifications
        allow create: if isAdmin();
        // Users can read notifications if they are the target, or if it's for 'all',
        // or if they are an admin and it's for 'admin'
        allow read: if request.auth.uid == resource.data.target 
                    || resource.data.target == 'all'
                    || (resource.data.target == 'admin' && isAdmin());
        // No update/delete allowed for now
        allow update, delete: if false;
    }

    // Public topics can be read by anyone authenticated, created by the user,
    // but only fully managed (archived/deleted) by an admin.
    match /publicTopics/{topicId} {
        // Allow authenticated users to read all public topics.
        allow read: if request.auth != null;
        
        // Allow creating a topic if the user ID matches.
        allow create: if request.auth.uid == request.resource.data.userId;

        // Allow an admin to update a topic (e.g., to archive it).
        // Also allow the original author to edit their own topic (future feature).
        allow update: if isAdmin() || request.auth.uid == resource.data.userId;

        // Only admins can delete public topics.
        allow delete: if isAdmin();
    }

    // User-specific data
    match /users/{userId}/{collection}/{docId} {
      // A user can only access their own data.
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // User profile document
    match /users/{userId} {
        // Allow a user to read, create and update their own profile.
        allow read, create, update: if request.auth.uid == userId;
        // Do not allow users to delete their profile document for data integrity.
        allow delete: if false;
    }
  }
}