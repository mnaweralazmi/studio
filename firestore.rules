rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin(userId) {
      // The primary admin UID for this application.
      // Add more UIDs to this array to grant admin privileges to other users.
      let adminUids = ['JU2IAJu8XEeCqM33bu1wzlrA7id2'];
      return userId in adminUids;
    }

    // Default Deny: Disallow all reads and writes by default.
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Allow users to read/write their own data.
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow logged-in users to read public topics.
    match /users/{userId}/topics/{topicId} {
      allow get: if request.auth != null && (resource.data.isPublic == true || request.auth.uid == userId);
    }
    
    // Allow collectionGroup query for public topics.
    match /{path=**}/topics/{topicId} {
       allow read: if resource.data.isPublic == true;
    }

    // Notifications can be read by their target (or all users)
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
                   (resource.data.target == 'all' || resource.data.target == request.auth.uid || (resource.data.target == 'admin' && isAdmin(request.auth.uid)));
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // siteContent (for ad marquee)
    match /siteContent/{docId} {
        allow read: if true; // Everyone can read ads
        allow write: if request.auth != null && isAdmin(request.auth.uid); // Only admin can write
    }
  }
}
